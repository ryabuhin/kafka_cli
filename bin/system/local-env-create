#!/bin/bash
#
# Run a local kafka cluster for testing purposes. Script creates instances of:
#   > Zookeeper
#   > Kafka Broker (id = 1)
#   > Schema Registry
# Script requires the installation of the docker and docker-compose utilities to work properly with docker.
# Script automaticaly creates configuration file in '${KFK_CLI_HOME}/etc/env' directory for environment
# or uses existing one if exists with provided 'cluster_name'.
# Open '${KFK_CLI_HOME}/etc/system/zksr-compose.yml' compose file to make changes in kafka cluster.
#
# Required Arguments:
#   'cluster_name'        : name of the cluster.
#
# All configuration files must be stored in '${KFK_CLI_HOME}/etc/env' directory.
# All configuration files must follow the following pattern name: <cluster-name>_config.properties
# ---
# author: valentine-riabukhin.pro

SCRIPT_LOCATION="$(cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
KFK_CLI_ETC_SYSTEM="${KFK_CLI_HOME}/etc/system"
KFK_CLI_ETC_ENV="${KFK_CLI_HOME}/etc/env"
INVALID_ARGUMENTS_ERROR_CODE=128

GRE='\e[0;32m'      # green
RED='\e[0;31m'      # red
YEL="\033[1;33m"    # yellow
NCO="\033[0m"       # no color

echoc() {
    local color=$1
    local message=$2
    local color_prefix=''
    [ "${color}" = "RED" ] && color_prefix="${RED}[-]${NCO}"
    [ "${color}" = "GRE" ] && color_prefix="${GRE}[+]${NCO}"
    [ "${color}" = "YEL" ] && color_prefix="${YEL}[?]${NCO}"
    printf "${color_prefix} ${message}\n"
}

usage() {
    local exit_status="${1}"
    [[ -z "${exit_status}" ]] && exit_status=0
    cat <<EOF
Usage: kfk system local-env create [<parameters>]
Description:
    Run a local kafka cluster for testing purposes. Script creates instances of:
        > Zookeeper
        > Kafka Broker (id = 1)
        > Schema Registry
    Script requires the installation of the docker and docker-compose utilities to work properly with docker.
    Script automaticaly creates configuration file in '\${KFK_CLI_HOME}/etc/env' directory for environment
    or uses existing one if exists with provided 'cluster_name'.
    Open '\${KFK_CLI_HOME}/etc/system/zksr-compose.yml' compose file to make changes in kafka cluster.

    All configuration files must be stored in '\${KFK_CLI_HOME}/etc/env' directory.
    All configuration files must follow the following pattern name: <cluster-name>_config.properties
    
    Required Arguments:
      'cluster_name'        : name of the cluster.

Examples:
    kfk system local-env create k1
EOF
    exit $exit_status
}

if [ "${1}" = 'help' ]; then usage
elif [ -z "$1" ]; then usage ${INVALID_ARGUMENTS_ERROR_CODE}; fi

CLUSTER_NAME="$(echo ${1} | awk '{print tolower($0)}')"
ENV_PROPS_LOCATION="${KFK_CLI_ETC_ENV}/local-${CLUSTER_NAME}_config.properties"

export MACHINE_INTERFACE='127.0.0.1'
if [ ! -f "${ENV_PROPS_LOCATION}" ]; then 
    echoc "YEL" "Configuration file for ${CLUSTER_NAME} environment is not found. It will be generated new from scratch."
    # export MACHINE_INTERFACE=$(ifconfig | grep 192.168 | awk '{print $2}')
    export K_MACHINE_PORT=$[ $RANDOM % 26492 + 16492 ]
    export SR_MACHINE_PORT=$[ $RANDOM % 26492 + 16492 ]
    cat "${KFK_CLI_ETC_SYSTEM}/local_plaintex_config.properties" | envsubst > "${KFK_CLI_ETC_ENV}/local-${CLUSTER_NAME}_config.properties"
else
    bootstrap_servers_prop=$(cat "${ENV_PROPS_LOCATION}" | grep 'bootstrap.servers' | awk -F'[=]' '{print $2}')
    sregistry_url_prop=$(cat "${ENV_PROPS_LOCATION}" | grep 'schema.registry.url' | awk -F'[=]' '{print $2}')
    # export MACHINE_INTERFACE=$(echo "${bootstrap_servers_prop}" | awk -F'[:]' '{print $1}')
    export K_MACHINE_PORT=$(echo "${bootstrap_servers_prop}" | awk -F'[:]' '{print $2}')
    export SR_MACHINE_PORT=$(echo "${sregistry_url_prop}" | awk -F'[:]' '{print $3}')
fi

docker-compose -p "kfk-${CLUSTER_NAME}" -f "${KFK_CLI_ETC_SYSTEM}/zksr-compose.yml" down
container_ids=$(docker ps -aq -f "name=kfk-${CLUSTER_NAME}")
[ ! -z "$container_ids" ] && docker rm -f ${container_ids}
docker-compose -p "kfk-${CLUSTER_NAME}" -f "${KFK_CLI_ETC_SYSTEM}/zksr-compose.yml" up -d